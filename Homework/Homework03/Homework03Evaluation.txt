
Homework03 Evaluation
======================
For Queue.py you should have a single ended Queue class with all the methods
we have discussed in class, including inserting, deleting, and displaying.
You should also have a 'QueueApp.py' source file that imports your 'Queue.py'
class and tests out all of the methods in it.

The circular linked list is a special case of the Python 'list' which allows
you to have an 'endless' or 'beginning-less' list of entries.  Because of
the way Python handles lists, you won't need to make it 'linked', but you
WILL need it to be 'circular'.  You will also make that into a 'stack' that
is 'LIFO' in nature for the next problem.

Your coding style is also part of the evaluation.  Good variable and function
names, consistent indenting, artful code creation, good logic, etc.

Finally, there will be two 'extra credit' problems if you want some extra
challenges ~ implement a python version of the 'Josephus problem' as it is
described on the homework web page for a possible 7 extra points, and/or you
can do the Deque, for which you should again have two files, a 'Deque.py' file
which has all the functionality and a 'DequeApp.py' file to test it.  See the
rubric below to see what methods are required.

scores:
=====================================================
Queue.py
   Queue class compiles/runs                 [3 pt.]
   display method exists                     [3 pt.]
QueueApp.py or main in Queue.py
   QueueApp class compiles/runs              [3 pt.]
   tests insert()                            [3 pt.]
   tests remove()                            [3 pt.]
   tests display()                           [3 pt.]
   tests wrap-around insert, remove, display [3 pt.]
Deque.py  [EC}
   Deque class compiles/runs                 [EC 1 pt.]
   insertLeft method exists & works          [EC 1 pt.]
   insertRight method exists & works         [EC 1 pt.]
   removeLeft method exists & works          [EC 1 pt.]
   removeRight method exists & works         [EC 1 pt.]
   isEmpty method exists & works             [EC 1 pt.]
   isFull method exists & works              [EC 1 pt.]
DequeApp.py or main in Deque.py [EC]
   tests insertLeft()                        [EC 1 pt.]
   tests insertRight()                       [EC 1 pt.]
   tests removeLeft()                        [EC 1 pt.]
   tests removeRight()                       [EC 1 pt.]
   tests isEmpty()                           [EC 1 pt.]
   tests isFull()                            [EC 1 pt.]
CircluarLinkedList.py
   Circular linked list class compiles/runs  [3 pt.]
   insertion method works                    [3 pt.]
   deletion method works                     [3 pt.]
   searching method works                    [3 pt.]
CircularStack.py
   circular stack class compiles/runs        [4 pt.]
   tests work as advertised                  [4 pt.]
Coding style
   Good names, consistent indenting          [4 pt.]
   Headers in all files                      [0 pt.]
Josephus.py
   Josephus problem compiles/runs            [EC 2 pt.]
   works as advertised                       [EC 4 pt.]

Total points is  50 points for Queue, Circular LL and Circular Stack plus Style
 extra credit is  7 points for Josephus problem
 extra credit is 13 points for Deque and DequeApp
-------------------
  Grand total is 70 points

============================================================================
Comments:

Good work on this assignment!  Here's a couple of things to consider:

For your Queue problem, you don't have a separate QueueApp file as was asked
   for in the problem statement.  However, you DO have code in the "Queue.py"
   file that runs to check out your queue, so good.  Two things to consider
   with this and all programs is first to have a bit more information on the
   output of your tests, telling the user what you are doing along with both
   the expected and the received value of each test displayed.  A good way
   of doing this is to put out an "expected: ... actual: ..." message with a
   preceding explanation of each test ~ like:

   inserting five values 10 20 30 40 50
   displaying queue contents ~
      expected: [10,20,30,40,50]
        actual: [10,20,30,40]
   test failure

   The second thing is to make sure you have PLENTY of test cases.  Don't
   just insert a couple of values, print them, then remove them and check if
   they are gone.  Instead, create the queue, print its empty size, then add
   eight numbers to it and print that.  Then remove three and print that.
   Add four more and print that, then remove five values and print that.
   Then, check if the queue is full and if not try to fill it up so that you
   can check if your "insert()" method gives an error message that the queue
   is full.  Finally, empty the queue and check that it's empty, then try to
   remove something from the empty queue and check if your "remove()" method
   gives you an error here, too.

   Nice job handling the wrap around on this, too!

On your Deque operations, everything looks pretty good, except the removal
   test doesn't seem quite correct.  You insert 10 and 30 from the left, and
   20 and 40 from the right.  The deque should now look like:

      | 10 | 30 | xx | xx | ... | xx | xx | 40 | 20 |

   You then removeLeft, removeRight, and remove Left, so your deque should
   be:

      | xx | xx | xx | xx | ... | xx | xx | xx | 20 |

   Finally you insertLeft, insertRight, insertLeft, and insertRight so you
   should have:

      | 50 | 70 | xx | xx | ... | xx | 80 | 60 | 20 |

   However, printing out the deque shows "40 50 60 70 80" instead of showing
   "50 70 80 60 20" as would be expected.  Still, you got REALLY close!

On your Circular Linked List, first off it doesn't do anything, since you've
   *defined* a "main()" but you never call it.  I put in a call at the end
   of the file to do that [free of charge] and now it runs and produces your
   output.  Again, check my comments to the Queue problem ~ there is output
   but I have to go hunting through your code to find out what you are doing
   as well as how you are doing it.  Once I do that, however, it all seems
   to be working fine!

Circular stack, apart from the dearth of output, works fine.  NEED MORE TEST
   CASES!!  MORE COWBELL!!

Josephus works, except you shouldn't remove that last person ~ I ran the
   program with:

       python Josephus.py 37 3 17

   ...and everything counted fine, but didn't stop with one person left.  It
   killed off Josephus!  ACK!  No one is left to tell the tale...

Coding style is pretty good, althoug a bit dense.  Don't be afraid to put in
   a few blank lines to make your code more readable.  Also, you didn't put
   in any file headers, which was specified on the rubric.

You got 64 out of 50 which is 128% which is an A-plus

All in all, a very nice job on this assignment!  Keep up the good work.
